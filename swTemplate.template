/**
 * Created by Aaron on 2019/10/22.
 */

var CACHE_NAME = <%=CACHE_NAME%>; // cache对象的名字
var urlsToCache = [ // 想要缓存的文件的数组
    <%=CACHE_LIST%>
];

// 如果所有文件都成功缓存，则将安装成功
self.addEventListener('install', function(event) {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(function(cache) {
                console.log('Opened cache');
                return cache.addAll(urlsToCache);
            })
    );
});

self.addEventListener('activate', function(event) {
    console.log('Claiming control');
    return self.clients.claim();
});

//监听fetch事件，可以拦截所有请求并处理
self.addEventListener('fetch', event => {

    event.respondWith(
        caches.match(event.request)
            .then(res => {
                //1. 如果请求的资源已被缓存，则直接返回
                if (res) return res;
                //2. 没有，则发起请求并缓存结果
                let requestClone = event.request.clone();
                return fetch(requestClone).then(netRes => {
                    if(!netRes || netRes.status !== 200) return netRes;
                    let responseClone = netRes.clone();
                    caches.open(CACHE_NAME).then(cache => cache.put(requestClone, responseClone));
                    return netRes;
                });
            })
    );
});
// self.addEventListener('sync', function(event){
//     console.log("service worker需要进行后台同步，tag:");
// });